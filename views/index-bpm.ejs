<html>
<head>
<title> Tracker </title>

<style>
body { 
    font-family: "Arial"; 
    font-size: 100px;
    font-weight: bold;
}

.blink {
  -moz-animation-duration: 500ms;
  -moz-animation-name: blink;
  -moz-animation-iteration-count: infinite;
  -moz-animation-direction: alternate;
  
  -webkit-animation-duration: 500ms;
  -webkit-animation-name: blink;
  -webkit-animation-iteration-count: infinite;
  -webkit-animation-direction: alternate;
  
  animation-duration: 500ms;
  animation-name: blink;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

@-moz-keyframes blink {
  0% {
    opacity: 0;
    color: pink;
  }

  49.99% {
    opacity: 0;
    color: green;
  }
  50% {
    opacity: 1;
    color: blue;
  }

  99.99% {
    opacity: 1;
    color: orange;
  }
  100% {
    opacity: 0;
    color: pink;
  }
}

@-webkit-keyframes blink {
  0% {
    opacity: 0;
    color: pink;
  }

  49.99% {
    opacity: 0;
    color: green;
  }
  50% {
    opacity: 1;
    color: blue;
  }

  99.99% {
    opacity: 1;
    color: orange;
  }
  100% {
    opacity: 0;
    color: pink;
  }
}

@keyframes blink {
  0% {
    opacity: 0;
    color: pink;
  }

  49.99% {
    opacity: 0;
    color: green;
  }
  50% {
    opacity: 1;
    color: blue;
  }

  99.99% {
    opacity: 1;
    color: orange;
  }
  100% {
    opacity: 0;
    color: pink;
  }
}

</style>

<script type="text/javascript" src="/underscore.js"></script>

<!--
<script src="//ajax.googleapis.com/ajax/libs/jquerymobile/1.4.3/jquery.mobile.min.js"></script>
-->

<script type="text/javascript">

    var socket;
    var color = Math.random();
    var color255 = Math.round(color * 255);

    var MAX_RECORDING_LENGTH = 50;
    var MIN_BPM = 70;
    var MAX_BPM = 180;
    var MIN_SENSITIVITY = 80;
    var TOLERANCE = 0.80; // 20% tolerance to find value
    var MIN_SPREAD = 5;
    var bpmTarget = 120;

    function getBPM(input, samplingInterval) {

        if (input.length < 2) return { values: [], bpm: 0 };

        var valueAboveOne = false;
        for (i = 0; i < input.length; i++) {
            if (input[i] > 1) {
                valueAboveOne = true;
                break;
            }
        }

        if (!valueAboveOne) return { values: [], bpm: 0 };

        var spread = _.max(input) - _.min(input);
        if (spread < MIN_SPREAD) return { values: [], bpm: 0 };

        var autoCorrel = function(values, period) {
            var result = 0;
            for (var i = 0; i < values.length; i++) {
                result += values[i] * values[(i + period) % values.length];
            }
            return result;
        }

        var valuesWithIndex = [];
        var max = -1;
        for (var i = 1; i < input.length / 2; i++) {
            var correlValue = autoCorrel(input, i);
            valuesWithIndex.push({ value: correlValue, index: i });
            if (correlValue > max) max = correlValue;
        }

        var lowerThreshold = max * TOLERANCE;
 
        var candidates = _.select(valuesWithIndex, function(item) {
            return item.value > lowerThreshold;
        });
 
        var maxPeriod = 60 / MIN_BPM / samplingInterval;
        var minPeriod = 60 / MAX_BPM / samplingInterval;
        var candidatesInRange = _.select(candidates, function(item) {
            return item.index > minPeriod && item.index < maxPeriod;
        });

        var strongCandidates = _.select(candidatesInRange, function(item) {
                return item.value > MIN_SENSITIVITY;
        });

        if (strongCandidates.length == 0) {
            return { values: candidates, bpm: '?' };
        }
 
        var selected = _.max(strongCandidates, function(item) {
            return item.value;
        });

        // try to find pattern at double speed
        var floor = Math.floor(selected.index / 2);
        var ceil = Math.ceil(selected.index / 2);

        var doubleSpeed;
        _.each(strongCandidates, function(item) {
            if (item.index == floor && item.value > (selected.value * 0.80)) {
                doubleSpeed = item;
            }
            else if (item.index == ceil && item.value > (selected.value * 0.80)) {
                doubleSpeed = item;
            }
        });

        if (doubleSpeed) selected = doubleSpeed;

        var bpm = Math.round(60 / (selected.index * samplingInterval));

        var ordered = _.sortBy(valuesWithIndex, function(item) { return item.value });
        var debug = ordered.slice(ordered.length-5, ordered.length);
 
        return { values: ordered, bpm: bpm, strength: selected.value };
    }

    function getInSyncRange(bpm, samplingInterval) {
        var intvl = 60 / bpm / samplingInterval;
        var upperBound = Math.round(60 / ((intvl - 1) * samplingInterval));
        var lowerBound = Math.round(60 / ((intvl + 1) * samplingInterval));
        return [ lowerBound, upperBound ];
    }

    function HSVtoRGB(h, s, v) {
        var r, g, b, i, f, p, q, t;
        if (h && s === undefined && v === undefined) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        return {
           r: Math.floor(r * 255),
           g: Math.floor(g * 255),
           b: Math.floor(b * 255)
        };
    }

    var aggregatedMovement = 0;
    var sampleCount = 0;

    function socketOpened() {
        document.getElementById("log").innerHTML = 'connected.';
    }

    function socketClosed() {
        document.getElementById("log").innerHTML = 'disconnected.';  
    }

    function onload() {

        var bg = HSVtoRGB(color, 1, 1);

        document.body.style.backgroundColor = "rgb(" + bg.r + ", " + bg.g + ", " + bg.b + ")";

        var recording = new Array();

        var inSyncCounter = 0;
        var decreaseBy = 1;

        var CORNY_PHRASES = [
            "SHAKE YA GROOVE THANG!!",
            "UUUUUUH YEAAAAA!!",
            "PUMP IT UP!!!!",
            "UNTZ UNTZ!!",
            "AAAAWWWW SHIIIIIIT!!"
        ];
        var corny_phrase = CORNY_PHRASES[Math.floor(Math.random() * CORNY_PHRASES.length)];

        var deviceMotionHandler = function(event) {
            var summed = 0;
            summed += Math.abs(event.acceleration.x);
            summed += Math.abs(event.acceleration.y);
            summed += Math.abs(event.acceleration.z);

            recording.push(summed);
            if (recording.length > MAX_RECORDING_LENGTH) recording.shift();

            var result = getBPM(recording, event.interval);

            if (result.bpm == '?') return;
            
            var syncRange = getInSyncRange(bpmTarget, event.interval);
            if (result.bpm >= syncRange[0] && result.bpm <= syncRange[1]) {
                decreaseBy = 1;
                inSyncCounter++;
                if (inSyncCounter > 20) {
                    document.getElementById("party").innerHTML = corny_phrase;
               }
            }
            else {
                document.getElementById("party").innerHTML = "";
                //document.getElementById("log-b").innerHTML = "";
                if (inSyncCounter > 0) { 
                    inSyncCounter = Math.round(inSyncCounter - decreaseBy);
                    decreaseBy += 0.25;
                    if (inSyncCounter < 0) inSyncCounter = 0;
                }
            }
            document.getElementById("log-b").innerHTML =  
                "<br/><br/>MOVIN' " + inSyncCounter;

            document.getElementById("accel").innerHTML = 'YOUR BPM: ' 
                + result.bpm + '<br/><br/>';


            var syncToSend = inSyncCounter > 20 ? inSyncCounter : 0;
            if (socket && socket.readyState == 1) {
                socket.send(color255 + "|" + Math.round(summed) 
                        + "|" + result.bpm + "|" + syncToSend);
            }
        }

        window.addEventListener('devicemotion', deviceMotionHandler);
        var on = true;
        document.addEventListener('touchstart', function(e) {
            /*
            if (socket && socket.readyState == 1) {
                socket.send(recordingBeta);
            }

            document.getElementById("log-c").innerHTML = "SENT";
            window.removeEventListener("deviceorientation", deviceOrientationHandler, true);
            return;

            if (on) {
                window.removeEventListener('devicemotion', deviceMotionHandler);
                on = false;
            }
            else {
                window.addEventListener('devicemotion', deviceMotionHandler);
                on = true;
            }
            */
        }, false);

        socket = new WebSocket('<%= websocket_url %>');
        socket.onopen = socketOpened;
        socket.onclose = socketClosed;
    };

</script>

</head>

<body onload="onload()">

    <div id="log"></div>
    <div id="accel-x"></div>
    <div id="sample-count"></div>
    <div id="accel"></div>
    <div class="blink" id="party"></div>
    <div id="log-b"></div>
    <div id="log-c"></div>

</body>
</html>

