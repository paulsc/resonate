<html>
<head>
<title> Tracker </title>

<style>
body { 
    font-family: "Arial"; 
    font-size: 100px;
    font-weight: bold;
}
</style>

<script type="text/javascript" src="/underscore.js"></script>

<!--
<script src="//ajax.googleapis.com/ajax/libs/jquerymobile/1.4.3/jquery.mobile.min.js"></script>
-->

<script type="text/javascript">

    var socket;
    var color = Math.random();
    var color255 = Math.round(color * 255);

    function getBPM(input) {

        if (input.length < 2) return { values: [], bpm: 0 };

        var valueAboveOne = false;
        for (i = 0; i < input.length; i++) {
            if (input[i] > 1) {
                valueAboveOne = true;
                break;
            }
        }

        if (!valueAboveOne) return { values: [], bpm: 0 };

        var autoCorrel = function(values, period) {
            var result = 0;
            for (var i = 0; i < values.length; i++) {
                result += values[i] * values[(i + period) % values.length];
            }
            return result;
        }

        var valuesWithIndex = [];
        for (var i = 1; i < input.length / 2; i++) {
            valuesWithIndex.push({ value: autoCorrel(input, i), index: i });
        }

        console.log(input)
        console.log(valuesWithIndex)
        var ordered = _.sortBy(valuesWithIndex, 
                function(entry) { return entry.value });

        var topValues = ordered.slice(-5);
        var selectedResult = _.min(topValues, function(entry) { 
                return entry.index; 
        })

        var max = selectedResult.index;
        var bpm = 60 / (max * 0.05);
        return { values: ordered, bpm: bpm };
    }

    function HSVtoRGB(h, s, v) {
        var r, g, b, i, f, p, q, t;
        if (h && s === undefined && v === undefined) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        return {
    r: Math.floor(r * 255),
           g: Math.floor(g * 255),
           b: Math.floor(b * 255)
        };
    }

    var aggregatedMovement = 0;
    var sampleCount = 0;

    function processAccell() {
        if (sampleCount == 0) return;
        var averagedAccel = Math.round(aggregatedMovement / sampleCount);

        document.getElementById("accel").innerHTML = averagedAccel;
        document.getElementById("sample-count").innerHTML = sampleCount;

        aggregatedMovement = 0;
        sampleCount = 0;

        if (socket && socket.readyState == 1) {
            socket.send(color255 + "|" + averagedAccel);
        }  
    }

    function socketOpened() {
        document.getElementById("log").innerHTML = 'connected.';
    }

    function socketClosed() {
        document.getElementById("log").innerHTML = 'disconnected.';  
    }

    function onload() {

        var bg = HSVtoRGB(color, 1, 1);

        document.body.style.backgroundColor = "rgb(" + bg.r + ", " + bg.g + ", " + bg.b + ")";

        var recording = new Array();
        var MAX_RECORDING_LENGTH = 100;

        setTimeout(function() {
            //window.removeEventListener('devicemotion', deviceMotionHandler);
        }, 10000);

        var deviceMotionHandler = function(event) {
            var summed = 0;
            summed += Math.abs(event.acceleration.x);
            summed += Math.abs(event.acceleration.y);
            summed += Math.abs(event.acceleration.z);

            if (socket && socket.readyState == 1) {
                socket.send(color255 + "|" + summed);
            }

            recording.push(summed)
            if (recording.length > MAX_RECORDING_LENGTH) recording.shift()

            var result = getBPM(recording);
            var bpm = result.bpm;
            var values = result.values;

            if (bpm == 0 || bpm < 30 || bpm > 240) bpm = '-';
            else bpm = Math.round(bpm);

            document.getElementById("accel").innerHTML = 'BPM: ' + bpm;

            document.getElementById("sample-count").innerHTML = recording.length;
        }

        window.addEventListener('devicemotion', deviceMotionHandler);
        var on = true;
        document.addEventListener('touchstart', function(e) {
            if (on) {
                window.removeEventListener('devicemotion', deviceMotionHandler);
                on = false;
            }
            else {
                window.addEventListener('devicemotion', deviceMotionHandler);
                on = true;
            }
        }, false);

        //setInterval(processAccell, 20);

        socket = new WebSocket('<%= websocket_url %>');
        socket.onopen = socketOpened;
        socket.onclose = socketClosed;
    };

</script>

</head>

<body onload="onload()">

    <div id="log"></div>
    <div id="accel-x"></div>
    <div id="sample-count"></div>
    <div id="accel"></div>

</body>
</html>

